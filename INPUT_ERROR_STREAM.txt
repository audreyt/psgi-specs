== Python/WSGI

Input:
  read(size), readline(), readlines(hint), __iter__()

Errors:
  flush(), write(str), writelines(seq)
  The input and error streams provided by the server must support the following methods:

== Ruby/Rack

Input:
  gets(), read([length, [buffer]]), each(), rewind(), close()

Errors:
  puts(), write(), flush(), close()

== Perl/PSGI

Input:
  Filehandles (GLOB or IO::Handle):
    $io->read($buf, $len), $io->close() = REQUIRED
    $io->seek($pos) = OPTIONAL (may die)

Errors:
  $io->print(), $io->close()

  
Observation
-----------

Rack (which is an implementation as well as a specification) has a
Rack::RewindableInput which implements rewind() method by saving the
input into a temporary file.

PSGI is a spec, so it doesn't require the Input stream to implement
seek() which is impossible in the case where the input stream is a
socket or STDIN filehandle.

Also, WSGI/Rack support iterator (__iter__ and .each) but Perl doesn't
have such a thing: The implementor can mock IO::Handle object, or use
PerlIO to create an object that behaves like a real IO.



